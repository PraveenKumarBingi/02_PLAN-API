package com.app.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.app.binding.PlanBinding;
import com.app.entity.PlanCategory;
import com.app.entity.PlanEntity;
import com.app.service.PlanService;

@RestController
@RequestMapping("/plans")
public class PlanController {

    private PlanService planService;
    private PlanCategory planCategoryService;

    public PlanController(PlanService planService, PlanCategory planCategoryService) {
        this.planService = planService;
        this.planCategoryService = planCategoryService;
    }

    // Create a new Plan Category
    @PostMapping("/category")
    public ResponseEntity<PlanCategory> createPlanCategory(@RequestBody PlanCategory planCategory) {
        PlanCategory savedPlanCategory = ((PlanService) planCategoryService).savePlanCategory(planCategory);
        return ResponseEntity.ok(savedPlanCategory);
    }

    // Retrieve all Plan Categories
    @GetMapping("/categories")
    public ResponseEntity<List<PlanCategory>> getAllPlanCategories() {
        List<PlanCategory> planCategories = ((PlanService) planCategoryService).getAllPlanCategories();
        return ResponseEntity.ok(planCategories);
    }

    // Save a new plan
    @PostMapping("/save")
    public ResponseEntity<Boolean> savePlan(@RequestBody PlanBinding planBinding) {
        PlanEntity planEntity = new PlanEntity();

        // Setting fields from PlanBinding to PlanEntity
        planEntity.setPlanId(planBinding.getPlanId());
        planEntity.setPlanName(planBinding.getPlanName());
        planEntity.setPlanStartDate(planBinding.getPlanStartDate());
        planEntity.setPlanEndDate(planBinding.getPlanEndDate());
        planEntity.setActiveSw(planBinding.getActiveSw());
        planEntity.setPlanCategoryId(planBinding.getPlanCategoryId());
        planEntity.setCreatedBy(planBinding.getCreatedBy());
        planEntity.setUpdatedBy(planBinding.getUpdatedBy());
        planEntity.setCreateDate(planBinding.getCreateDate());
        planEntity.setUpdateDate(planBinding.getUpdateDate());

        // Saving the plan entity
        boolean result = planService.savePlan(planEntity);
        return ResponseEntity.ok(result);
    }

    // Get all plans
    @GetMapping("/all")
    public ResponseEntity<List<PlanBinding>> getAllPlans() {
        List<PlanEntity> plans = planService.getAllPlans();
        List<PlanBinding> planBindings = new ArrayList<>();

        // Converting PlanEntity to PlanBinding
        for (PlanEntity plan : plans) {
            PlanBinding binding = new PlanBinding();
            binding.setPlanId(plan.getPlanId());
            binding.setPlanName(plan.getPlanName());
            binding.setPlanStartDate(plan.getPlanStartDate());
            binding.setPlanEndDate(plan.getPlanEndDate());
            binding.setActiveSw(plan.getActiveSw());
            binding.setCreatedBy(plan.getCreatedBy());
            binding.setUpdatedBy(plan.getUpdatedBy());
            binding.setCreateDate(plan.getCreateDate());
            binding.setUpdateDate(plan.getUpdateDate());
            planBindings.add(binding);
        }

        return ResponseEntity.ok(planBindings);
    }

    // Update a plan
    @PutMapping("/update")
    public ResponseEntity<Boolean> updatePlan(@RequestBody PlanBinding planBinding) {
        PlanEntity planEntity = new PlanEntity();

        // Converting PlanBinding to PlanEntity
        planEntity.setPlanId(planBinding.getPlanId());
        planEntity.setPlanName(planBinding.getPlanName());
        planEntity.setPlanStartDate(planBinding.getPlanStartDate());
        planEntity.setPlanEndDate(planBinding.getPlanEndDate());
        planEntity.setActiveSw(planBinding.getActiveSw());
        planEntity.setPlanCategoryId(planBinding.getPlanCategoryId());
        planEntity.setCreatedBy(planBinding.getCreatedBy());
        planEntity.setUpdatedBy(planBinding.getUpdatedBy());
        planEntity.setCreateDate(planBinding.getCreateDate());
        planEntity.setUpdateDate(planBinding.getUpdateDate());

        // Updating the plan entity
        boolean result = planService.updatePlan(planEntity);
        return ResponseEntity.ok(result);
    }

    // Delete a plan by ID
    @DeleteMapping("/delete/{planId}")
    public ResponseEntity<Boolean> deletePlanById(@PathVariable Integer planId) {
        boolean result = planService.deletePlanById(planId);
        return ResponseEntity.ok(result);
    }

    // Change the status of a plan
    @PatchMapping("/status/{planId}")
    public ResponseEntity<Boolean> changePlanStatus(@PathVariable Integer planId, @RequestParam String activeSw) {
        boolean result = planService.planStatusChange(planId, activeSw);
        return ResponseEntity.ok(result);
    }
}
