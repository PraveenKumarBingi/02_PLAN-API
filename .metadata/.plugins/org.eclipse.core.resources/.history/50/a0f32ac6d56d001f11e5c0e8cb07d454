package com.app.controller;

import java.util.List;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.app.entity.PlanEntity;

import comm.app.service.PlanService;

@RestController
public class PlaneController {

    private PlanService planService;
    private Map<String, String> messages;

    public PlaneController(PlanService planService, Map<String, String> messages) {
        this.planService = planService;
        this.messages = messages;
    }

    @GetMapping("/categories")
    public ResponseEntity<Map<Integer, String>> planCategories() {
        Map<Integer, String> categories = planService.getPlanCategories();
        return new ResponseEntity<>(categories, HttpStatus.OK);
    }

    @PostMapping("/plan")
    public ResponseEntity<String> savePlan(@RequestBody PlanEntity plan) {
        String responseMsg;
        boolean isSaved = planService.savePlan(plan);
        if (isSaved) {
            responseMsg = messages.get("PLAN_SAVE_SUCC");
        } else {
            responseMsg = messages.get("PLAN_SAVE_FAIL");
        }
        return new ResponseEntity<>(responseMsg, HttpStatus.CREATED);
    }

    @GetMapping("/getAllPlans")
    public ResponseEntity<List<PlanEntity>> plans() {
        List<PlanEntity> allPlans = planService.getAllPlans();
        return new ResponseEntity<>(allPlans, HttpStatus.OK);
    }

    @GetMapping("/plan/{planId}")
    public ResponseEntity<PlanEntity> editPlan(@PathVariable Integer planId) {
        PlanEntity plan = planService.getPlanById(planId);
        return new ResponseEntity<>(plan, HttpStatus.OK);
    }

    @PutMapping("/plan")
    public ResponseEntity<String> updatePlan(@RequestBody PlanEntity plan) {
        String msg;
        boolean isUpdated = planService.updatePlan(plan);
        if (isUpdated) {
            msg = messages.get("PLAN_UPDATE_SUCC");
        } else {
            msg = messages.get("PLAN_UPDATE_FAIL");
        }
        return new ResponseEntity<>(msg, HttpStatus.OK);
    }

    @DeleteMapping("/plan/{planId}")
    public ResponseEntity<String> deletePlan(@PathVariable Integer planId) {
        boolean isDeleted = planService.deletePlanById(planId);
        String msg;
        if (isDeleted) {
            msg = messages.get("PLAN_DELETE_SUCC");
        } else {
            msg = messages.get("PLAN_DELETE_FAIL");
        }
        return new ResponseEntity<>(msg, HttpStatus.OK);
    }

    @PutMapping("/status-change/{planId}/{status}")
    public ResponseEntity<String> statusChange(@PathVariable Integer planId, @PathVariable String status) {
        String msg;
        boolean isStatusChanged = planService.planStatusChange(planId, status);
        if (isStatusChanged) {
            msg = messages.get("PLAN_STATUS_CHANGE_SUCC");
        } else {
            msg = messages.get("PLAN_STATUS_CHANGE_FAIL");
        }
        return new ResponseEntity<>(msg, HttpStatus.OK);
    }
}
